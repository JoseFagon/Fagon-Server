enum UserRole {
  admin
  funcionario
  vistoriador
}

enum ProjectType {
  laudo_cmar
}

enum ProjectStatus {
  aguardando_vistoria
  aguardando_geração_de_pdfs
  aguardando_assinatura_de_pdfs
  finalizado
  cancelado
}

enum CameraType {
  normal
  camera_360
}

enum LocationType {
  externo
  interno
}

enum SurfaceType {
  piso
  parede
  forro
}

enum PdfType {
  atestado
  anexo_m3
  anexo_m4
  laudo_avaliacao
  relatorio_fotografico
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String?
  role       UserRole
  status     Boolean
  cameraType CameraType?

  Log Log[]

  AccessKey AccessKey[]
}

model Agency {
  id           String  @id @default(uuid())
  name         String
  agencyNumber Int
  cnpj         String? @unique
  cep          String
  state        String
  city         String
  district     String
  street       String
  number       Int

  Project Project[]
}

model Engineer {
  id                 String @id @default(uuid())
  name               String
  email              String @unique
  phone              String
  cpf                String @unique
  education          String
  registrationNumber String

  Project Project[]
}

model Project {
  id             String        @id @default(uuid())
  projectType    ProjectType
  upeCode        Int
  agencyId       String
  engineerId     String
  status         ProjectStatus
  structureType  String?
  inspectorName  String?
  inspectionDate DateTime?
  createdAt      DateTime      @default(now())

  agency   Agency   @relation(fields: [agencyId], references: [id])
  engineer Engineer @relation(fields: [engineerId], references: [id])

  AccessKey AccessKey[]

  Pavement Pavement[]

  Location Location[]

  Pathology Pathology[]

  Pdf Pdf[]
}

model AccessKey {
  id        String   @id @default(uuid())
  token     String   @unique
  projectId String
  userId    String
  expiresAt DateTime

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Pavement {
  id        String @id @default(uuid())
  projectId String
  pavement  String
  height    Float
  area      Float?

  project Project @relation(fields: [projectId], references: [id])

  Location Location[]

  @@unique([projectId, pavement])
}

model Location {
  id           String       @id @default(uuid())
  projectId    String
  pavementId   String?
  name         String
  locationType LocationType
  height       Float?

  project  Project   @relation(fields: [projectId], references: [id])
  pavement Pavement? @relation(fields: [pavementId], references: [id])

  MaterialFinishing MaterialFinishing[]

  Photo Photo[]

  Pathology Pathology[]
}

model MaterialFinishing {
  id                String      @id @default(uuid())
  locationId        String
  surface           SurfaceType
  materialFinishing String

  location Location @relation(fields: [locationId], references: [id])
}

model Photo {
  id             String  @id @default(uuid())
  locationId     String
  filePath       String
  selectedForPdf Boolean

  location Location @relation(fields: [locationId], references: [id])
}

model Pathology {
  id                String   @id @default(uuid())
  projectId         String
  locationId        String
  referenceLocation String
  title             String
  description       String
  recordDate        DateTime

  project  Project  @relation(fields: [projectId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  PathologyPhoto PathologyPhoto[]
}

model PathologyPhoto {
  id          String @id @default(uuid())
  pathologyId String
  filePath    String

  pathology Pathology @relation(fields: [pathologyId], references: [id])
}

model Pdf {
  id             String   @id @default(uuid())
  projectId      String
  pdfType        PdfType
  filePath       String
  signedFilePath String?
  generatedAt    DateTime

  project Project @relation(fields: [projectId], references: [id])
}

model StateLaw {
  id                 String   @id @default(uuid())
  state              String
  textState          String
  lawReference       String
  lawReference2      String
  policeAbbreviation String
  fullText           String?
  fullText2          String?
  publishedAt        DateTime
  active             Boolean
}

model Log {
  id          String   @id @default(uuid())
  userId      String
  action      String
  tableName   String
  targetId    String
  generatedAt DateTime

  user User @relation(fields: [userId], references: [id])
}
