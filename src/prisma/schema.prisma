
enum UserRole {
  admin
  funcionario
  vistoriador
}

enum ProjectType {
  laudo_cmar
}

enum ProjectStatus {
  aguardando_vistoria
  vistoria_em_progresso
  aguardando_gerar_pdfs    @map("aguardando_gerar_pdfs")
  aguardando_assinatura_de_pdfs
  finalizado
  cancelado
}

enum CameraType {
  normal
  camera_360
}

enum LocationType {
  externo
  interno
}

enum SurfaceType {
  piso
  parede
  forro
}

enum PdfType {
  atestado
  anexo_m3
  anexo_m4
  laudo_avaliacao
  relatorio_fotografico
}

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node src/prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  role       UserRole
  status     Boolean
  
  cameraType CameraType?
  accessKey  AccessKey[]
  log        Log[]
}

model Agency {
  id           String    @id @default(uuid())
  name         String
  agencyNumber Int
  cnpj         String?   @unique @default("NULL")
  cep          String
  state        String
  city         String
  district     String
  street       String
  number       Int
  
  project      Project[]
}

model Engineer {
  id                 String    @id @default(uuid())
  name               String
  email              String    @unique
  phone              String
  cpf                String    @unique
  education          String
  registrationNumber String
  registrationEntity String

  project            Project[]
}

model Project {
  id             String        @id @default(uuid())
  projectType    ProjectType
  upeCode        Int
  agencyId       String
  engineerId     String
  status         ProjectStatus
  structureType  String?
  floorHeight    Float?
  inspectorName  String?
  inspectionDate DateTime?
  createdAt      DateTime      @default(now())

  accessKey      AccessKey[]
  location       Location[]
  pathology      Pathology[]
  pavement       Pavement[]
  pdf            Pdf[]
  agency         Agency        @relation(fields: [agencyId], references: [id])
  engineer       Engineer      @relation(fields: [engineerId], references: [id])
}

model AccessKey {
  id        String   @id @default(uuid())
  token     String   @unique
  projectId String
  userId    String
  generatedBy String
  cameraType CameraType
  expiresAt DateTime

  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Pavement {
  id        String     @id @default(uuid())
  projectId String
  pavement  String
  height    Float?
  area      Float?

  @@unique([pavement, projectId]) 
  project   Project    @relation(fields: [projectId], references: [id])
  location  Location[]
}

model Location {
  id                String              @id @default(uuid())
  projectId         String
  pavementId        String?
  name              String
  locationType      LocationType
  facadeObservation String?
  height            Float?

  pavement          Pavement?           @relation(fields: [pavementId], references: [id], onDelete: Restrict)
  project           Project             @relation(fields: [projectId], references: [id])
  materialFinishing MaterialFinishing[]
  pathology         Pathology[]
  photo             Photo[]
}

model MaterialFinishing {
  id                String      @id @default(uuid())
  locationId        String
  surface           SurfaceType
  materialFinishing String
  
  location          Location    @relation(fields: [locationId], references: [id])
}

model Photo {
  id             String   @id @default(uuid())
  locationId     String
  filePath       String
  selectedForPdf Boolean
  name           String?
  
  location       Location @relation(fields: [locationId], references: [id])
}

model Pathology {
  id                String           @id @default(uuid())
  projectId         String
  locationId        String
  referenceLocation String
  title             String
  description       String
  recordDate        DateTime
  
  location          Location         @relation(fields: [locationId], references: [id])
  project           Project          @relation(fields: [projectId], references: [id])
  pathologyPhoto    PathologyPhoto[]
}

model PathologyPhoto {
  id          String    @id @default(uuid())
  pathologyId String
  filePath    String
  name        String?
  
  pathology   Pathology @relation(fields: [pathologyId], references: [id])
}

model Pdf {
  id             String   @id @default(uuid())
  projectId      String
  pdfType        PdfType
  filePath       String
  signedFilePath String?
  generatedAt    DateTime
  
  project        Project  @relation(fields: [projectId], references: [id])
}

model StateLaw {
  id                 String   @id @default(uuid())
  state              String
  textState          String
  lawReference       String
  lawReference2      String
  policeAbbreviation String
  fullText           String?
  fullText2          String?
  publishedAt        DateTime
  active             Boolean
}

model Log {
  id          String   @id @default(uuid())
  userId      String
  action      String
  tableName   String
  targetId    String
  generatedAt DateTime
  
  user        User     @relation(fields: [userId], references: [id])
}
